name: Build and Push Docker Image to GHCR

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version info
      id: get_version
      run: |
        # Debug: Show current ref and commit info
        echo "Current ref: ${{ github.ref_name }}"
        echo "Current commit: ${{ github.sha }}"
        
        # Always use timestamp-based build number for main branch
        if [ "${{ github.ref_name }}" = "main" ]; then
          # Get latest tag or use default
          LATEST_TAG=$(git tag --sort=-version:refname | head -1 2>/dev/null || echo "v2.1.0")
          BASE_VERSION=${LATEST_TAG#v}
          
          # Use current timestamp for unique build number
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          FULL_VERSION="${BASE_VERSION}-build.${BUILD_NUMBER}"
          
          echo "Latest tag: $LATEST_TAG"
          echo "Base version: $BASE_VERSION"
          echo "Build number: $BUILD_NUMBER" 
          echo "Generated version: $FULL_VERSION"
        else
          # For non-main branches, use simple version
          LATEST_TAG=$(git tag --sort=-version:refname | head -1 2>/dev/null || echo "v2.1.0")
          FULL_VERSION=${LATEST_TAG#v}
          echo "Non-main branch version: $FULL_VERSION"
        fi
        
        echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
        echo "::notice::Generated version: $FULL_VERSION"

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # For git tags: use semantic versioning
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # For main branch: always tag as latest first
          type=raw,value=latest,enable={{is_default_branch}}
          # For main branch: use computed version (always generate for main)
          type=raw,value=${{ steps.get_version.outputs.full_version }},enable={{is_default_branch}}
          # For PR: use pr number
          type=ref,event=pr,prefix=pr-
          # For other branches: use branch name
          type=ref,event=branch,enable=${{ !contains(github.ref, 'refs/heads/main') }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1